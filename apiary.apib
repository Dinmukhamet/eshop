FORMAT: 1A
HOST: https://eshop-dimash.herokuapp.com/
# E-SHOP API

The following document outlines the E-SHOP RESTful API.
E-SHOP App is a simple API allowing consumers to purchase products or add them to favourites.
Any questions can be directed to Dinmukhamet Igissinov (igissinov_d@auca.kg)

## Allowed HTTPs Requests

- PUT / PATCH     : Update resource
- POST    : Create resource
- GET     : Get a resource or list of resources
- DELETE  : To delete resource

## Endpoints

- https://eshop-dimash.herokuapp.com/brand/                 : List of all brands
- https://eshop-dimash.herokuapp.com/category/              : List of all categories and subcategories
- https://eshop-dimash.herokuapp.com/product/               : List of all products
- https://eshop-dimash.herokuapp.com/product/price/         : List of products' prices for some period of time
- https://eshop-dimash.herokuapp.com/product/hits/          : List of products sorted by total amount of purchases
- https://eshop-dimash.herokuapp.com/product/date/          : List of products sorted by date of creation
- https://eshop-dimash.herokuapp.com/product/recommended/   : List of products that was created by admin
- https://eshop-dimash.herokuapp.com/product/sales/         : List of all sales dedicated to one or several products for some period of time
- https://eshop-dimash.herokuapp.com/purchase/              : List of all purchases made by users. Here you can make a purchase.
- https://eshop-dimash.herokuapp.com/product_rating/        : Here users can leave their feedback for products
- https://eshop-dimash.herokuapp.com/comment/               : Here they can leave their comments for products
- https://eshop-dimash.herokuapp.com/comment_rating/        : Here they can rate comments (1 - 5)
- https://eshop-dimash.herokuapp.com/slider/                : List of pictures used for slider
- https://eshop-dimash.herokuapp.com/admin/                 : Admin panel


## Brands [/brand/]

**Brand attributes**
- name `(Char)` : Name of the brand

    Here you can watch all the brands we've got

### Get all brands [GET /brand/]

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all brands

    + Attributes

    + Body

        [
            {
               "name": "CATRICE"
            }
        ]

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Categories [/category/]

**Categories attributes**
- name `(Char)` : Name of the category, **required**
- parent `(FK)` : Foreign key constraint to itself

    Here you can watch what categories and subcategories of these categories we have 

### Get all categories [GET /category/]

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all brands

    + Attributes

    + Body

        [
            {
                "name": "Декоративная косметика",
                "parent": null
            }
        ]

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Group Products

    Here you can find full description for endpoints related to products

## Product [/product/]

**Product attributes**
- name `(Char)` : Name of the product, **Required**
- description `(Text)` : Description of the product,
- image `(Image)` : Image of the product, **Required**
- brand `(FK)`: Foreign key constraint to brands table, **Required**
- category `(FK)` : Foreign key  constraint to categories table, **Required**
- quantity `(Integer)` : Integer field for frontend developer
- is_purchased `(Boolean)` : Boolean field for frontend developer
- created_at `(DateTime)` : Date and time when product was created


### Get all products [GET /product/]

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all products

    + Attributes

    + Body 

        [
            {
                "get_id": 4,
                "name": "Бальзам \"Камила\"",
                "description": "Бальзам высшей категории. 800 мл.",
                "image": "http://eshop-dimash.herokuapp.com/media/death-star.png",
                "brand": 2,
                "category": [
                    5
                ],
                "current_price": 228.0,
                "quantity": 1,
                "is_purchased": false,
                "created_at": "2020-02-05T10:13:15.288480Z",
                "total_purchase": 0
            }
        ]
    
+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

### Filter product by category [GET /product/?category={category_id}]

+ Parameters

    + category_id (required, Integer) - category id

+ Request (application/json)

    + Headers

        Accept: application/json

+ Response 200 (application/json)

    OK

    + Body
    
+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body

### Filter product by brand [GET /product/?category={brand_id}]

+ Parameters

    + brand_id (required, Integer) - brand id

+ Request (application/json)

    + Headers

        Accept: application/json

+ Response 200 (application/json)

    OK

    + Body
    
+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body


### Get single product [GET /product/{product_id}]

+ Parameters

    + productId (required, Integer) - product id

+ Request (application/json)

    + Headers

            Accept: application/json

    + Body

+ Response 200 (application/json)

    Successfully returned all terms

    + Attributes

    + Body

        {
            "get_id": 6,
            "name": "Бальзам Силь-Гламур",
            "description": "Бальзам для роста ресниц Силь-Гламур / CIL-Glamour 3 г",
            "image": "http://eshop-dimash.herokuapp.com/media/shopping-cart.png",
            "brand": 3,
            "category": [
                3
            ],
            "current_price": 200.0,
            "quantity": 1,
            "is_purchased": false,
            "created_at": "2020-02-05T10:23:51.284477Z",
            "total_purchase": 0
        }

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Products Prices [/product/price/]

### Get products price [GET /product/price/]

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all products

    + Attributes

    + Body 

        [
            {
                "product": 3,
                "price": "369.00",
                "created_at": "2020-02-04T15:05:46.881485Z",
                "date_to": null
            }
        ]
    
+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Product Hits [/products/hits/]
### Get products sorted by total amount of purchases [GET /product/hits/]


+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all products

    + Attributes

    + Body 

        [
            {
                "get_id": 4,
                "name": "Бальзам \"Камила\"",
                "description": "Бальзам высшей категории. 800 мл.",
                "image": "http://eshop-dimash.herokuapp.com/media/death-star.png",
                "brand": 2,
                "category": [
                    5
                ],
                "current_price": 228.0,
                "quantity": 1,
                "is_purchased": false,
                "created_at": "2020-02-05T10:13:15.288480Z",
                "total_purchase": 2
            },
            {
                "get_id": 6,
                "name": "Бальзам Силь-Гламур",
                "description": "Бальзам для роста ресниц Силь-Гламур / CIL-Glamour 3 г",
                "image": "http://eshop-dimash.herokuapp.com/media/shopping-cart.png",
                "brand": 3,
                "category": [
                    3
                ],
                "current_price": 200.0,
                "quantity": 1,
                "is_purchased": false,
                "created_at": "2020-02-05T10:23:51.284477Z",
                "total_purchase": 1
            }
        ]
    
+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## New Products [/product/date/]
### Get products sorted by date of creation [GET /product/date/]


+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all products

    + Attributes

    + Body 

        [   
            {
                "get_id": 6,
                "name": "Бальзам Силь-Гламур",
                "description": "Бальзам для роста ресниц Силь-Гламур / CIL-Glamour 3 г",
                "image": "http://eshop-dimash.herokuapp.com/media/shopping-cart.png",
                "brand": 3,
                "category": [
                    3
                ],
                "current_price": 200.0,
                "quantity": 1,
                "is_purchased": false,
                "created_at": "2020-02-05T10:23:51.284477Z",
                "total_purchase": 1
            },
            {
                "get_id": 4,
                "name": "Бальзам \"Камила\"",
                "description": "Бальзам высшей категории. 800 мл.",
                "image": "http://eshop-dimash.herokuapp.com/media/death-star.png",
                "brand": 2,
                "category": [
                    5
                ],
                "current_price": 228.0,
                "quantity": 1,
                "is_purchased": false,
                "created_at": "2020-02-05T10:13:15.288480Z",
                "total_purchase": 2
            }
        ]
    
+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Recommended Products [/product/recommended/]
### Get products recommended by admin [GET /product/recommended/]


+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all products

    + Attributes

    + Body

        [
            {
                "date_from": "2020-02-14T12:51:41.007339Z",
                "date_to": null,
                "products": [
                    4,
                    6,
                    5,
                    2,
                    3
                ]
            }
        ]
    
+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Sales [/product/sale/]
### Get products that have some discounts [GET /product/sale/]


+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 200 (application/json)

    Successfully returned all products

    + Attributes

    + Body

        [
            {
                "date_from": "2020-02-01T15:15:13.857525Z",
                "date_to": null,
                "value": 20,
                "products": [
                    2,
                    3
                ]
            }
        ]
    
+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

+ Response 405 (application/json)

    Method not allowed
    
    + Body

## Group Purchase

## Purchase [/purchase/]

**Purchase attributes**

- contacts `(List)` : List of contacts data, **Required**
- products `(List)` : List of products user wants to buy, **Required**

### Make purchase [POST /purchase/]

+ Parameters

    + contacts (required, List)
    
        + name (required) - your name

        + email (required) - email

        + phone_number (required) - phone number

        + address (required) - address

        + comment - comment

    + products (required, List)

        + product (required) - product id

        + count (required) - amount of products that kind you want to purchase

    
+ Request (application/json)

    + Headers

            Accept: application/json

    + Body
    
        {
            "contacts": [
                {
                    "name": "Dimash",
                    "email": "d.igisinov@gmail.com",
                    "phone_number": "+996552206521",
                    "address": "test"
                }
            ],
            "products": [
                {
                    "product": 19,
                    "count": 2
                }
            ]
        }


+ Response 201 (application/json)

    OK

    + Body

    {
        "date": "2020-02-14T13:20:35.335285Z",
        "contacts": [
            {
                "name": "Dimash",
                "email": "d.igisinov@gmail.com",
                "phone_number": "+996552206521",
                "address": "test",
                "comment": ""
            }
        ],
        "products": [
            {
                "product": 19,
                "name": "Test",
                "price": 123123.0,
                "count": 2,
                "sale_value": 0,
                "total": 246246.0
            }
        ],
        "total_sum": 246246.0
    }
    
    
+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body

            ],
            "products": [
                {
                    "product": 19,
                    "count": 2
                }
            ]
        }

### Update purchase [PUT /purchase/{purchase_id}]

+ Parameters

    + purchase_id (required, Integer) - purchase id 

+ Request (application/json)

    + Headers

        Accept: application/json
    
    + Body

    {
        "contacts": [
            {
                "name": "Dimash",
                "email": "d.igisinov@gmail.com",
                "phone_number": "+996552206521",
                "address": "test"
            }
        ],
        "products": [
            {
                "product": 1,
                "count": 20
            }
        ]
    }

+ Response 201 (application/json)

    Successfully updated

    + Body

+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body

# Group Feedback

## Comment [/comment/]

### Get comments [GET /comment/]

+ Request (application/json)

    + Headers

            Accept: application/json


+ Response 200 (application/json)

    OK

    + Body

        [
            {
                "product": 1,
                "comment": "Very nice"
            }
        ]
    
+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body


### Post comment for some product [POST /comment/]

+ Parameters
    
    + product (required) - product id
    
    + comment - text

+ Request (application/json)

    + Headers 
        
        Accept: (application/json)
    
    + Body

        {
            "product": 1,
            "comment": "Very nice"
        }

+ Response 201 (application/json)

    Successfully created a comment

    + Body

        {
            "product": 1,
            "comment": "Very nice"
        }

+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body

### Get ratings for comments [GET /comment_rating/]


+ Request (application/json)

    + Headers

            Accept: application/json


+ Response 200 (application/json)

    OK

    + Body

        [
            {
                "comment": 1,
                "rate": 5
            }
        ]
    
+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body

### Rate comments [POST /comment_rating/]

+ Parameters

    + comment (required, Integer) - comment id
    + rate (required, Integer, 1 - 5) - rating

+ Request (application/json)

    + Headers
        
        Accept: application/json
    
    + Body

        {
            "comment": 1,
            "rate": 5
        }

+ Response 201 (application/json)

    Successfully created

    + Body

        {
            "comment": 1,
            "rate": 5
        }

+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body

## Product [/product_rating]
### Get product ratings [GET /product_rating]

+ Request (application/json)

    + Headers

            Accept: application/json


+ Response 200 (application/json)

    OK

    + Body

        [
            {
                "product": 1,
                "rate": 5
            }
        ]
    
+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body


### Rate product [POST /product_rating/]

+ Parameters

    + product (required, Integer) - product id
    + rate (required, Integer, 1 - 5) - rating

+ Request (application/json)

    + Headers
        
        Accept: application/json
    
    + Body

        {
            "product": 1,
            "rate": 5
        }

+ Response 201 (application/json)

    Successfully created

    + Body

        {
            "product": 1,
            "rate": 5
        }

+ Response 400 (application/json)

    Bad Request

    + Body

+ Response 403 (application/json)

    Forbidden

    + Body